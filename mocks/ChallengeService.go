// Code generated by mockery v2.39.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ChallengeService is an autogenerated mock type for the ChallengeService type
type ChallengeService struct {
	mock.Mock
}

// GenerateTaskToResolve provides a mock function with given fields: clientID
func (_m *ChallengeService) GenerateTaskToResolve(clientID string) (string, error) {
	ret := _m.Called(clientID)

	if len(ret) == 0 {
		panic("no return value specified for GenerateTaskToResolve")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(clientID)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(clientID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mint provides a mock function with given fields: prefixToken
func (_m *ChallengeService) Mint(prefixToken string) (string, error) {
	ret := _m.Called(prefixToken)

	if len(ret) == 0 {
		panic("no return value specified for Mint")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(prefixToken)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(prefixToken)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prefixToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifySolution provides a mock function with given fields: clientID, solution
func (_m *ChallengeService) VerifySolution(clientID string, solution string) (bool, error) {
	ret := _m.Called(clientID, solution)

	if len(ret) == 0 {
		panic("no return value specified for VerifySolution")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(clientID, solution)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(clientID, solution)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(clientID, solution)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewChallengeService creates a new instance of ChallengeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChallengeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChallengeService {
	mock := &ChallengeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
