// Code generated by mockery v2.39.0. DO NOT EDIT.

package mocks

import (
	config "wisdom/internal/infrastructure/config"

	mock "github.com/stretchr/testify/mock"
)

// SyncService is an autogenerated mock type for the SyncService type
type SyncService struct {
	mock.Mock
}

// GenerateRequestID provides a mock function with given fields:
func (_m *SyncService) GenerateRequestID() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateRequestID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields: clientConfig
func (_m *SyncService) Init(clientConfig config.ClientConfig) {
	_m.Called(clientConfig)
}

// PushResponse provides a mock function with given fields: requestID, response, err
func (_m *SyncService) PushResponse(requestID string, response []byte, err error) error {
	ret := _m.Called(requestID, response, err)

	if len(ret) == 0 {
		panic("no return value specified for PushResponse")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, error) error); ok {
		r0 = rf(requestID, response, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitResponseByRequestID provides a mock function with given fields: requestID
func (_m *SyncService) WaitResponseByRequestID(requestID string) ([]byte, error) {
	ret := _m.Called(requestID)

	if len(ret) == 0 {
		panic("no return value specified for WaitResponseByRequestID")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(requestID)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(requestID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(requestID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSyncService creates a new instance of SyncService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSyncService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SyncService {
	mock := &SyncService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
